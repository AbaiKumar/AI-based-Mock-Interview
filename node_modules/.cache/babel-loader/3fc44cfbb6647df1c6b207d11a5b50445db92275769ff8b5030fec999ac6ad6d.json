{"ast":null,"code":"const BASE_URL = 'http://127.0.0.1:5000'; // Backend base URL\n\n/**\r\n * Sends the user's answer to the backend and fetches the next question or redirects if test is complete.\r\n * @param {string} answer - The user's answer.\r\n * @returns {Promise<string|null>} - The next question from the backend or `null` if redirecting.\r\n */\nexport const sendAnswerToBackend = async answer => {\n  try {\n    const response = await fetch(`${BASE_URL}/api/send-answer`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        answer\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch the next question');\n    }\n    const data = await response.json();\n    if (data.redirect) {\n      // Redirect the user to the specified URL\n      window.location.href = data.url;\n      return null; // No further question since we're redirecting\n    }\n    return data.question; // Return the next question from the backend\n  } catch (error) {\n    console.error('Error communicating with the backend:', error);\n    throw error;\n  }\n};\n\n// const BASE_URL = 'http://127.0.0.1:5000'; // Backend base URL\n\n// /**\n//  * Sends the user's answer to the backend and fetches the next question.\n//  * @param {string} answer - The user's answer.\n//  * @returns {Promise<string>} - The next question from the backend.\n//  */\n// export const sendAnswerToBackend = async (answer) => {\n//   try {\n//     const response = await fetch(`${BASE_URL}/api/send-answer`, {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify({ answer }),\n//     });\n\n//     if (!response.ok) {\n//       throw new Error('Failed to fetch the next question');\n//     }\n\n//     const data = await response.json();\n//     return data.question; // Return the next question from the backend\n//   } catch (error) {\n//     console.error('Error communicating with the backend:', error);\n//     throw error;\n//   }\n// };","map":{"version":3,"names":["BASE_URL","sendAnswerToBackend","answer","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","redirect","window","location","href","url","question","error","console"],"sources":["C:/Users/abaii/OneDrive/Desktop/mock-interview-sqlupdate/frontend/src/utils/api.js"],"sourcesContent":["const BASE_URL = 'http://127.0.0.1:5000'; // Backend base URL\r\n\r\n/**\r\n * Sends the user's answer to the backend and fetches the next question or redirects if test is complete.\r\n * @param {string} answer - The user's answer.\r\n * @returns {Promise<string|null>} - The next question from the backend or `null` if redirecting.\r\n */\r\nexport const sendAnswerToBackend = async (answer) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/api/send-answer`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ answer }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch the next question');\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.redirect) {\r\n      // Redirect the user to the specified URL\r\n      window.location.href = data.url;\r\n      return null; // No further question since we're redirecting\r\n    }\r\n\r\n    return data.question; // Return the next question from the backend\r\n  } catch (error) {\r\n    console.error('Error communicating with the backend:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n// const BASE_URL = 'http://127.0.0.1:5000'; // Backend base URL\r\n\r\n// /**\r\n//  * Sends the user's answer to the backend and fetches the next question.\r\n//  * @param {string} answer - The user's answer.\r\n//  * @returns {Promise<string>} - The next question from the backend.\r\n//  */\r\n// export const sendAnswerToBackend = async (answer) => {\r\n//   try {\r\n//     const response = await fetch(`${BASE_URL}/api/send-answer`, {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify({ answer }),\r\n//     });\r\n\r\n//     if (!response.ok) {\r\n//       throw new Error('Failed to fetch the next question');\r\n//     }\r\n\r\n//     const data = await response.json();\r\n//     return data.question; // Return the next question from the backend\r\n//   } catch (error) {\r\n//     console.error('Error communicating with the backend:', error);\r\n//     throw error;\r\n//   }\r\n// };\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB,CAAC,CAAC;;AAE1C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,MAAM,IAAK;EACnD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,kBAAkB,EAAE;MAC1DK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAO,CAAC;IACjC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;IACtD;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAElC,IAAID,IAAI,CAACE,QAAQ,EAAE;MACjB;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGL,IAAI,CAACM,GAAG;MAC/B,OAAO,IAAI,CAAC,CAAC;IACf;IAEA,OAAON,IAAI,CAACO,QAAQ,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC7D,MAAMA,KAAK;EACb;AACF,CAAC;;AAKD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}