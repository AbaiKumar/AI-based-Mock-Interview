{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abaii\\\\OneDrive\\\\Desktop\\\\mock-interview-sqlupdate\\\\frontend\\\\src\\\\pages\\\\completion-page\\\\CompletionPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // Use useNavigate instead of useHistory\nimport Header from \"../../components/Header/Header\";\nimport Footer from \"../../components/Footer/Footer\";\nimport \"./../completion-page/completionpage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompletionPage = () => {\n  _s();\n  const [message, setMessage] = useState(\"\"); // State to hold the completion message\n  const navigate = useNavigate(); // Hook for redirection\n\n  // Fetch the completion status and message from the backend\n  useEffect(() => {\n    const checkCompletionStatus = async () => {\n      try {\n        const statusResponse = await fetch(\"http://localhost:5000/completion-status\");\n        const statusData = await statusResponse.json();\n        if (statusData.completed) {\n          // If the test is completed, fetch the message\n          const response = await fetch(\"http://localhost:5000/completion-page\");\n          const data = await response.json();\n          setMessage(data.message); // Set the completion message\n        } else {\n          // Redirect to start page if the test is not completed\n          navigate(\"/start-test\");\n        }\n      } catch (error) {\n        console.error(\"Error checking completion status:\", error);\n        // Handle error if necessary\n      }\n    };\n    checkCompletionStatus();\n  }, [navigate]); // Depend on `navigate`\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-window\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"completion-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your responses have been recorded successfully. You will be redirected shortly.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(CompletionPage, \"U/V6iW5Mb4FmAKYXtqnExXSbttI=\", false, function () {\n  return [useNavigate];\n});\n_c = CompletionPage;\nexport default CompletionPage;\nvar _c;\n$RefreshReg$(_c, \"CompletionPage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","Header","Footer","jsxDEV","_jsxDEV","CompletionPage","_s","message","setMessage","navigate","checkCompletionStatus","statusResponse","fetch","statusData","json","completed","response","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/abaii/OneDrive/Desktop/mock-interview-sqlupdate/frontend/src/pages/completion-page/CompletionPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\"; // Use useNavigate instead of useHistory\r\nimport Header from \"../../components/Header/Header\";\r\nimport Footer from \"../../components/Footer/Footer\";\r\nimport \"./../completion-page/completionpage.css\";\r\n\r\nconst CompletionPage: React.FC = () => {\r\n  const [message, setMessage] = useState<string>(\"\"); // State to hold the completion message\r\n  const navigate = useNavigate(); // Hook for redirection\r\n\r\n  // Fetch the completion status and message from the backend\r\n  useEffect(() => {\r\n    const checkCompletionStatus = async () => {\r\n      try {\r\n        const statusResponse = await fetch(\r\n          \"http://localhost:5000/completion-status\"\r\n        );\r\n        const statusData = await statusResponse.json();\r\n\r\n        if (statusData.completed) {\r\n          // If the test is completed, fetch the message\r\n          const response = await fetch(\"http://localhost:5000/completion-page\");\r\n          const data = await response.json();\r\n          setMessage(data.message); // Set the completion message\r\n        } else {\r\n          // Redirect to start page if the test is not completed\r\n          navigate(\"/start-test\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error checking completion status:\", error);\r\n        // Handle error if necessary\r\n      }\r\n    };\r\n\r\n    checkCompletionStatus();\r\n  }, [navigate]); // Depend on `navigate`\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"main-content\">\r\n        <div className=\"question-window\">\r\n          <h2>{message}</h2> {/* Display the message from backend */}\r\n        </div>\r\n        <div className=\"completion-message\">\r\n          <p>\r\n            Your responses have been recorded successfully. You will be\r\n            redirected shortly.\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompletionPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAOC,MAAM,MAAM,gCAAgC;AACnD,OAAOC,MAAM,MAAM,gCAAgC;AACnD,OAAO,yCAAyC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,cAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAS,EAAE,CAAC,CAAC,CAAC;EACpD,MAAMW,QAAQ,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC;EACAD,SAAS,CAAC,MAAM;IACd,MAAMW,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC,IAAI;QACF,MAAMC,cAAc,GAAG,MAAMC,KAAK,CAChC,yCACF,CAAC;QACD,MAAMC,UAAU,GAAG,MAAMF,cAAc,CAACG,IAAI,CAAC,CAAC;QAE9C,IAAID,UAAU,CAACE,SAAS,EAAE;UACxB;UACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAAC,uCAAuC,CAAC;UACrE,MAAMK,IAAI,GAAG,MAAMD,QAAQ,CAACF,IAAI,CAAC,CAAC;UAClCN,UAAU,CAACS,IAAI,CAACV,OAAO,CAAC,CAAC,CAAC;QAC5B,CAAC,MAAM;UACL;UACAE,QAAQ,CAAC,aAAa,CAAC;QACzB;MACF,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;QACzD;MACF;IACF,CAAC;IAEDR,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACD,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,oBACEL,OAAA;IAAKgB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBjB,OAAA,CAACH,MAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVrB,OAAA;MAAKgB,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BjB,OAAA;QAAKgB,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9BjB,OAAA;UAAAiB,QAAA,EAAKd;QAAO;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,KAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChB,CAAC,eACNrB,OAAA;QAAKgB,SAAS,EAAC,oBAAoB;QAAAC,QAAA,eACjCjB,OAAA;UAAAiB,QAAA,EAAG;QAGH;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACNrB,OAAA,CAACF,MAAM;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAACnB,EAAA,CAhDID,cAAwB;EAAA,QAEXL,WAAW;AAAA;AAAA0B,EAAA,GAFxBrB,cAAwB;AAkD9B,eAAeA,cAAc;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}