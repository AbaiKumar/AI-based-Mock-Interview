{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abaii\\\\OneDrive\\\\Desktop\\\\mock-interview-sqlupdate\\\\frontend\\\\src\\\\pages\\\\home-page\\\\HomePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Header from './../../components/Header/Header';\nimport Footer from './../../components/Footer/Footer';\nimport './homepage.css';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePage = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answer, setAnswer] = useState(''); // Current answer text\n  const [answers, setAnswers] = useState([]);\n  const [isListening, setIsListening] = useState(false);\n  const recognitionRef = useRef(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const email = localStorage.getItem('userEmail'); // Get user email from localStorage\n      const numQuestions = localStorage.getItem('numQuestions'); // Number of questions from DetailsPage\n      const selectedTopics = JSON.parse(localStorage.getItem('selectedTopics') || '[]'); // Selected topics from DetailsPage\n\n      if (!email || !numQuestions || selectedTopics.length === 0) {\n        alert('Required details are missing. Please go back to the details page.');\n        return;\n      }\n      try {\n        const response = await fetch('http://127.0.0.1:5000/start_test', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email,\n            numQuestions: parseInt(numQuestions),\n            selectedTopics\n          })\n        });\n        if (response.ok) {\n          const data = await response.json();\n          consol.console.log(data);\n          setQuestions(data.questions_id || []);\n          localStorage.setItem('test_id', data.test_id); // Store test ID in localStorage\n        } else {\n          console.error('Failed to fetch questions');\n          alert('Failed to fetch questions. Please try again.');\n        }\n      } catch (error) {\n        console.error('Error fetching questions:', error);\n        alert('An error occurred while fetching questions.');\n      }\n    };\n    fetchQuestions();\n  }, []);\n\n  // Initialize speech recognition\n  if (!recognitionRef.current && 'webkitSpeechRecognition' in window) {\n    const SpeechRecognition = window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.interimResults = false;\n    recognition.continuous = true;\n    recognition.onstart = () => {\n      setIsListening(true);\n    };\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n    recognition.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0].transcript).join(' ');\n      setAnswer(prev => prev + ' ' + transcript); // Append recognized speech to the answer\n    };\n    recognition.onerror = () => {\n      setIsListening(false);\n    };\n    recognitionRef.current = recognition; // Save the instance\n  }\n  const handleMicClick = () => {\n    if (!recognitionRef.current) {\n      alert('Speech recognition is not supported in this browser.');\n      return;\n    }\n    if (isListening) {\n      recognitionRef.current.stop();\n    } else {\n      recognitionRef.current.start();\n    }\n  };\n  const handleAnswerSubmit = () => {\n    const currentQuestion = questions[currentQuestionIndex];\n    if (answer.trim() === '') {\n      alert('Please provide an answer before moving to the next question.');\n      return;\n    }\n\n    // Save the current answer\n    setAnswers(prev => [...prev, {\n      id: currentQuestion.id,\n      answer\n    }]);\n    setAnswer(''); // Clear the current answer input\n\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prev => prev + 1); // Move to the next question\n    } else {\n      // All questions answered, submit answers to backend\n      submitAnswersToBackend();\n    }\n  };\n  const submitAnswersToBackend = async () => {\n    const rollno = localStorage.getItem('userEmail');\n    const test_id = localStorage.getItem('test_id');\n    try {\n      const response = await fetch('http://127.0.0.1:5000/submit_answers', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          rollno,\n          testid: test_id,\n          answers\n        })\n      });\n      if (response.ok) {\n        alert('Answers submitted successfully!');\n        navigate('/dashborad'); // Navigate to the dashboard\n      } else {\n        console.error('Failed to submit answers');\n        alert('Failed to submit answers. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error submitting answers:', error);\n      alert('An error occurred while submitting answers.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: questions.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Question \", currentQuestionIndex + 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: questions[currentQuestionIndex].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: answer,\n          onChange: e => setAnswer(e.target.value),\n          className: \"answer-textbox\",\n          placeholder: \"Type your answer here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `mic-button ${isListening ? 'active' : ''}`,\n            title: isListening ? 'Click to stop recording' : 'Click to start recording',\n            onClick: handleMicClick,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"Microphone\",\n              children: \"\\uD83C\\uDFA4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAnswerSubmit,\n            className: \"submit-button\",\n            children: currentQuestionIndex === questions.length - 1 ? 'Finish Test' : 'Next Question'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading questions...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"OhZwuTTS/L4AyRq+dscJioiNtms=\", false, function () {\n  return [useNavigate];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Header","Footer","useNavigate","jsxDEV","_jsxDEV","HomePage","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","answer","setAnswer","answers","setAnswers","isListening","setIsListening","recognitionRef","navigate","fetchQuestions","email","localStorage","getItem","numQuestions","selectedTopics","JSON","parse","length","alert","response","fetch","method","headers","body","stringify","parseInt","ok","data","json","consol","console","log","questions_id","setItem","test_id","error","current","window","SpeechRecognition","webkitSpeechRecognition","recognition","lang","interimResults","continuous","onstart","onend","onresult","event","transcript","Array","from","results","map","result","join","prev","onerror","handleMicClick","stop","start","handleAnswerSubmit","currentQuestion","trim","id","submitAnswersToBackend","rollno","testid","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question","type","value","onChange","e","target","placeholder","title","onClick","role","_c","$RefreshReg$"],"sources":["C:/Users/abaii/OneDrive/Desktop/mock-interview-sqlupdate/frontend/src/pages/home-page/HomePage.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Header from './../../components/Header/Header';\nimport Footer from './../../components/Footer/Footer';\nimport './homepage.css';\nimport { useNavigate } from 'react-router-dom';\n\n\nconst HomePage: React.FC = () => {\n  const [questions, setQuestions] = useState<{ id: number; question: string }[]>([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<number>(0);\n  const [answer, setAnswer] = useState<string>(''); // Current answer text\n  const [answers, setAnswers] = useState<{ id: number; answer: string }[]>([]);\n  const [isListening, setIsListening] = useState<boolean>(false);\n  const recognitionRef = useRef<any>(null);\n  const navigate = useNavigate();\n\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const email = localStorage.getItem('userEmail'); // Get user email from localStorage\n      const numQuestions = localStorage.getItem('numQuestions'); // Number of questions from DetailsPage\n      const selectedTopics = JSON.parse(localStorage.getItem('selectedTopics') || '[]'); // Selected topics from DetailsPage\n\n      if (!email || !numQuestions || selectedTopics.length === 0) {\n        alert('Required details are missing. Please go back to the details page.');\n        return;\n      }\n\n      try {\n        const response = await fetch('http://127.0.0.1:5000/start_test', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            email,\n            numQuestions: parseInt(numQuestions),\n            selectedTopics,\n          }),\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          consol.console.log(data);\n          \n          setQuestions(data.questions_id || []);\n          localStorage.setItem('test_id', data.test_id); // Store test ID in localStorage\n        } else {\n          console.error('Failed to fetch questions');\n          alert('Failed to fetch questions. Please try again.');\n        }\n      } catch (error) {\n        console.error('Error fetching questions:', error);\n        alert('An error occurred while fetching questions.');\n      }\n    };\n\n    fetchQuestions();\n  }, []);\n\n  // Initialize speech recognition\n  if (!recognitionRef.current && 'webkitSpeechRecognition' in window) {\n    const SpeechRecognition = (window as any).webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n\n    recognition.lang = 'en-US';\n    recognition.interimResults = false;\n    recognition.continuous = true;\n\n    recognition.onstart = () => {\n      setIsListening(true);\n    };\n\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n\n    recognition.onresult = (event: SpeechRecognitionEvent) => {\n      const transcript = Array.from(event.results)\n        .map((result) => result[0].transcript)\n        .join(' ');\n      setAnswer((prev) => prev + ' ' + transcript); // Append recognized speech to the answer\n    };\n\n    recognition.onerror = () => {\n      setIsListening(false);\n    };\n\n    recognitionRef.current = recognition; // Save the instance\n  }\n\n  const handleMicClick = () => {\n    if (!recognitionRef.current) {\n      alert('Speech recognition is not supported in this browser.');\n      return;\n    }\n\n    if (isListening) {\n      recognitionRef.current.stop();\n    } else {\n      recognitionRef.current.start();\n    }\n  };\n\n  const handleAnswerSubmit = () => {\n    const currentQuestion = questions[currentQuestionIndex];\n    if (answer.trim() === '') {\n      alert('Please provide an answer before moving to the next question.');\n      return;\n    }\n\n    // Save the current answer\n    setAnswers((prev) => [...prev, { id: currentQuestion.id, answer }]);\n    setAnswer(''); // Clear the current answer input\n\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex((prev) => prev + 1); // Move to the next question\n    } else {\n      // All questions answered, submit answers to backend\n      submitAnswersToBackend();\n    }\n  };\n\n  const submitAnswersToBackend = async () => {\n    const rollno = localStorage.getItem('userEmail');\n    const test_id = localStorage.getItem('test_id');\n\n    try {\n      const response = await fetch('http://127.0.0.1:5000/submit_answers', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          rollno,\n          testid: test_id,\n          answers,\n        }),\n      });\n\n      if (response.ok) {\n        alert('Answers submitted successfully!');\n        navigate('/dashborad'); // Navigate to the dashboard\n\n      } else {\n        console.error('Failed to submit answers');\n        alert('Failed to submit answers. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error submitting answers:', error);\n      alert('An error occurred while submitting answers.');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"main-content\">\n        {questions.length > 0 ? (\n          <div className=\"question-container\">\n            <h2>Question {currentQuestionIndex + 1}</h2>\n            <p>{questions[currentQuestionIndex].question}</p>\n\n            <input\n              type=\"text\"\n              value={answer}\n              onChange={(e) => setAnswer(e.target.value)}\n              className=\"answer-textbox\"\n              placeholder=\"Type your answer here...\"\n            />\n\n            <div className=\"controls\">\n              <button\n                className={`mic-button ${isListening ? 'active' : ''}`}\n                title={isListening ? 'Click to stop recording' : 'Click to start recording'}\n                onClick={handleMicClick}\n              >\n                <span role=\"img\" aria-label=\"Microphone\">\n    🎤\n  </span>\n              </button>\n              <button onClick={handleAnswerSubmit} className=\"submit-button\">\n                {currentQuestionIndex === questions.length - 1 ? 'Finish Test' : 'Next Question'}\n              </button>\n            </div>\n          </div>\n        ) : (\n          <p>Loading questions...</p>\n        )}\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default HomePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}