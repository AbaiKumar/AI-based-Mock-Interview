{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abaii\\\\OneDrive\\\\Desktop\\\\mock-interview-sqlupdate\\\\frontend\\\\src\\\\pages\\\\home-page\\\\HomePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport Header from '../../components/Header/Header.tsx';\nimport Footer from '../../components/Footer/Footer.tsx';\nimport { sendAnswerToBackend } from '../../utils/api.js'; // Import the API logic\nimport './homepage.css'; // Import the global styles for App\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePage = () => {\n  _s();\n  const [answer, setAnswer] = useState(''); // State for the answer text\n  const [question, setQuestion] = useState('Are you ready?'); // State for the question\n  const [isListening, setIsListening] = useState(false); // State to track if the mic is active\n  const [isSubmitting, setIsSubmitting] = useState(false); // State to manage the \"Send\" button status\n  const recognitionRef = useRef(null); // Ref to store the SpeechRecognition instance\n\n  // Initialize SpeechRecognition only once\n  if (!recognitionRef.current && 'webkitSpeechRecognition' in window) {\n    const SpeechRecognition = window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.interimResults = false;\n    recognition.continuous = true; // Allow continuous speech\n\n    recognition.onstart = () => {\n      setIsListening(true);\n    };\n    recognition.onend = () => {\n      setIsListening(false);\n    };\n    recognition.onresult = event => {\n      const transcript = Array.from(event.results).map(result => result[0].transcript).join(' ');\n      setAnswer(prevAnswer => prevAnswer + ' ' + transcript); // Append the recognized speech to existing text\n    };\n    recognition.onerror = () => {\n      setIsListening(false);\n    };\n    recognitionRef.current = recognition; // Store the instance\n  }\n  const handleMicClick = () => {\n    if (!recognitionRef.current) {\n      alert('Speech recognition is not supported in this browser.');\n      return;\n    }\n    if (isListening) {\n      recognitionRef.current.stop(); // Stop recognition if already listening\n    } else {\n      recognitionRef.current.start(); // Start recognition if not listening\n    }\n  };\n  const handleAnswerChange = e => {\n    setAnswer(e.target.value); // Allow manual editing of the text box\n  };\n  const handleSend = async () => {\n    if (isSubmitting) return; // Prevent further clicks if submitting\n\n    if (answer.trim() === '') {\n      alert('Please enter an answer or type \"N/A\" if you don\\'t know the answer.');\n      return;\n    }\n    setIsSubmitting(true); // Set submitting state to true to disable the button\n    try {\n      const nextQuestion = await sendAnswerToBackend(answer); // Call the utility function\n      setQuestion(nextQuestion); // Update the question\n      setAnswer(''); // Clear the answer field\n    } catch (error) {\n      console.error('Error sending answer:', error);\n    } finally {\n      setIsSubmitting(false); // Set submitting state back to false after processing\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-window\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"response-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: answer,\n          onChange: handleAnswerChange,\n          className: \"answer-textbox\",\n          placeholder: \"Type your answer here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `mic-button ${isListening ? 'active' : ''}`,\n          title: isListening ? 'Click to stop recording' : 'Click to start recording',\n          onClick: handleMicClick,\n          children: \"\\uD83C\\uDFA4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          className: \"send-button\",\n          disabled: isSubmitting // Disable the button if submitting\n          ,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(HomePage, \"zJiNn7AXt4Ky/zagJ3SIBCl0e8o=\");\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useState","useRef","Header","Footer","sendAnswerToBackend","jsxDEV","_jsxDEV","HomePage","_s","answer","setAnswer","question","setQuestion","isListening","setIsListening","isSubmitting","setIsSubmitting","recognitionRef","current","window","SpeechRecognition","webkitSpeechRecognition","recognition","lang","interimResults","continuous","onstart","onend","onresult","event","transcript","Array","from","results","map","result","join","prevAnswer","onerror","handleMicClick","alert","stop","start","handleAnswerChange","e","target","value","handleSend","trim","nextQuestion","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","title","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/abaii/OneDrive/Desktop/mock-interview-sqlupdate/frontend/src/pages/home-page/HomePage.tsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport Header from '../../components/Header/Header.tsx';\r\nimport Footer from '../../components/Footer/Footer.tsx';\r\nimport { sendAnswerToBackend } from '../../utils/api.js'; // Import the API logic\r\nimport './homepage.css'; // Import the global styles for App\r\n\r\nconst HomePage: React.FC = () => {\r\n  const [answer, setAnswer] = useState<string>(''); // State for the answer text\r\n  const [question, setQuestion] = useState<string>('Are you ready?'); // State for the question\r\n  const [isListening, setIsListening] = useState<boolean>(false); // State to track if the mic is active\r\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false); // State to manage the \"Send\" button status\r\n  const recognitionRef = useRef<any>(null); // Ref to store the SpeechRecognition instance\r\n\r\n  // Initialize SpeechRecognition only once\r\n  if (!recognitionRef.current && 'webkitSpeechRecognition' in window) {\r\n    const SpeechRecognition = (window as any).webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n\r\n    recognition.lang = 'en-US';\r\n    recognition.interimResults = false;\r\n    recognition.continuous = true; // Allow continuous speech\r\n\r\n    recognition.onstart = () => {\r\n      setIsListening(true);\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      setIsListening(false);\r\n    };\r\n\r\n    recognition.onresult = (event: SpeechRecognitionEvent) => {\r\n      const transcript = Array.from(event.results)\r\n        .map((result) => result[0].transcript)\r\n        .join(' ');\r\n      setAnswer((prevAnswer) => prevAnswer + ' ' + transcript); // Append the recognized speech to existing text\r\n    };\r\n\r\n    recognition.onerror = () => {\r\n      setIsListening(false);\r\n    };\r\n\r\n    recognitionRef.current = recognition; // Store the instance\r\n  }\r\n\r\n  const handleMicClick = () => {\r\n    if (!recognitionRef.current) {\r\n      alert('Speech recognition is not supported in this browser.');\r\n      return;\r\n    }\r\n\r\n    if (isListening) {\r\n      recognitionRef.current.stop(); // Stop recognition if already listening\r\n    } else {\r\n      recognitionRef.current.start(); // Start recognition if not listening\r\n    }\r\n  };\r\n\r\n  const handleAnswerChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setAnswer(e.target.value); // Allow manual editing of the text box\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    if (isSubmitting) return; // Prevent further clicks if submitting\r\n\r\n    if (answer.trim() === '') {\r\n      alert('Please enter an answer or type \"N/A\" if you don\\'t know the answer.');\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true); // Set submitting state to true to disable the button\r\n    try {\r\n      const nextQuestion = await sendAnswerToBackend(answer); // Call the utility function\r\n      setQuestion(nextQuestion); // Update the question\r\n      setAnswer(''); // Clear the answer field\r\n    } catch (error) {\r\n      console.error('Error sending answer:', error);\r\n    } finally {\r\n      setIsSubmitting(false); // Set submitting state back to false after processing\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <div className=\"main-content\">\r\n        <div className=\"question-window\">\r\n          <h2>{question}</h2>\r\n        </div>\r\n        <div className=\"response-container\">\r\n          <input\r\n            type=\"text\"\r\n            value={answer}\r\n            onChange={handleAnswerChange}\r\n            className=\"answer-textbox\"\r\n            placeholder=\"Type your answer here...\"\r\n          />\r\n          <button\r\n            className={`mic-button ${isListening ? 'active' : ''}`}\r\n            title={isListening ? 'Click to stop recording' : 'Click to start recording'}\r\n            onClick={handleMicClick}\r\n          >\r\n            🎤\r\n          </button>\r\n          <button\r\n            onClick={handleSend}\r\n            className=\"send-button\"\r\n            disabled={isSubmitting} // Disable the button if submitting\r\n          >\r\n            Send\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}